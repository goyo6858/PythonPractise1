#Ch16-E10 鼠标事件例子

from tkinter import *
from random import randint

#鼠标坐标通过标签显示
def mouse_pos(event):
  lbl_mouse_pos.configure(text='({}, {})'.format(event.x,event.y))

#鼠标滚轮改变方形大小
def whl(event):
  global x1,x2,y1,y2
  if event.delta>0: #滚轮上滚
    d=1
  elif event.delta<0: #滚轮下滚
    d=-1
  x1=x1-d
  x2=x2+d
  y1=y1-d
  y2=y2+d
  cvs1.coords(rect1, x1,y1,x2,y2)

#拖动
def drg(event):
  global x1,x2,y1,y2,x_f,y_f,drg_status
  if not drg_status:
    x_f=event.x
    y_f=event.y
    drg_status=True
    return
  x1=x1+(event.x-x_f) #x_f由if逻辑赋予了拖动开始时的坐标，即增量最初是零，随着拖动时event.x的增加而增加
  y1=y1+(event.y-y_f)
  x2=x2+(event.x-x_f)
  y2=y2+(event.y-y_f)
  cvs1.coords(rect1,x1,y1,x2,y2)
  x_f=event.x #记录上一次mainloop()循环横坐标位置
  y_f=event.y #记录上一次mainloop()循环纵坐标位置

#释放鼠标，改变拖动状态变量——如果没有本函数与drg()的结合，拖动就会出现点击canvas还未拖动就已经移动了的问题
def mouse_release(event):
  global drg_status
  drg_status=False
  
#左键点击（随机）改变颜色
def clk(event):
  global color
  color='#{:02X}{:02X}{:02X}'.format(randint(1,255),randint(1,255),randint(1,255))
  cvs1.itemconfigure(rect1,fill=color)
  #改变标签文本
  lbl_rect1_color.configure(text='Current color RGB:{:3d},{:3d},{:3d}'.format(int(color[1:3],16),int(color[3:5],16),int(color[5:7],16)))

#创建窗口及元素
root=Tk()

lbl_mouse_pos=Label()
lbl_rect1_color=Label(text='Current color RGB:')

#方形创建及相关全局变量
x1=y1=100
x2=y2=150
x_f=0
y_f=0
drg_status=False
cvs1=Canvas(width=600,height=600)
color='#{:02X}{:02X}{:02X}'.format(randint(1,255),randint(1,255),randint(1,255))

rect1=cvs1.create_rectangle(x1,y1,x2,y2,fill=color)
cvs1.bind('<Motion>',mouse_pos) #鼠标移动事件与函数关联
cvs1.bind('<MouseWheel>',whl) #滚轮转动事件与函数关联
cvs1.tag_bind(rect1,'<B1-Motion>',drg) #鼠标左键拖动事件与函数关联;无法实现cvs1.bind(rect1,'<B1-Motion>',drg)？
cvs1.tag_bind(rect1,'<Button-1>',clk) #点击方块改变为随机颜色
cvs1.bind('<ButtonRelease-1>',mouse_release) #释放鼠标左键，复位布尔变量
cvs1.focus_set()


#布局
lbl_mouse_pos.grid(row=0,column=0)
cvs1.grid(row=1,column=0)
lbl_rect1_color.grid(row=2,column=0)
